name: Documentation Quality Assurance

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'docs/**'
      - 'mkdocs.yml'
      - 'scripts/**'
      - '.github/workflows/docs-qa.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'docs/**'
      - 'mkdocs.yml'
      - 'scripts/**'
      - '.github/workflows/docs-qa.yml'

jobs:
  documentation-qa:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y aspell aspell-en
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt || pip install mkdocs mkdocs-material mkdocstrings pymdown-extensions pyyaml markdown beautifulsoup4 requests
        
    - name: Validate documentation structure
      run: |
        python scripts/validate_docs.py --spell-check --config scripts/validation_config.yml
        
    - name: Build documentation
      run: |
        python scripts/build_docs.py --no-serve
        
    - name: Check links
      run: |
        python scripts/check_links.py --site-dir site --no-external
        
    - name: Run markdown linting
      run: |
        # Install markdownlint if available
        if command -v markdownlint &> /dev/null; then
          markdownlint docs/ || echo "markdownlint not available, skipping"
        else
          echo "markdownlint not installed, using built-in linting"
        fi
        
    - name: Upload validation report
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: docs-validation-report
        path: |
          docs_validation_report.json
          site/
        retention-days: 30
        
    - name: Comment PR with results
      if: github.event_name == 'pull_request' && always()
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          
          try {
            // Read validation report if it exists
            let reportContent = '## 📚 Documentation Quality Report\n\n';
            
            if (fs.existsSync('docs_validation_report.json')) {
              const report = JSON.parse(fs.readFileSync('docs_validation_report.json', 'utf8'));
              
              reportContent += `### Summary\n`;
              reportContent += `- **Errors**: ${report.summary.total_errors}\n`;
              reportContent += `- **Warnings**: ${report.summary.total_warnings}\n`;
              reportContent += `- **Coverage**: ${report.coverage_report.coverage_percentage.toFixed(1)}%\n`;
              reportContent += `- **Status**: ${report.summary.validation_passed ? '✅ Passed' : '❌ Failed'}\n\n`;
              
              if (report.summary.total_errors > 0) {
                reportContent += `### ❌ Errors (${report.summary.total_errors})\n`;
                report.validation_results.errors.slice(0, 5).forEach(error => {
                  reportContent += `- **${error.rule}**: ${error.message} (${error.file_path}:${error.line_number})\n`;
                });
                if (report.summary.total_errors > 5) {
                  reportContent += `- ... and ${report.summary.total_errors - 5} more errors\n`;
                }
                reportContent += '\n';
              }
              
              if (report.summary.total_warnings > 0) {
                reportContent += `### ⚠️ Warnings (${report.summary.total_warnings})\n`;
                report.validation_results.warnings.slice(0, 3).forEach(warning => {
                  reportContent += `- **${warning.rule}**: ${warning.message} (${warning.file_path}:${warning.line_number})\n`;
                });
                if (report.summary.total_warnings > 3) {
                  reportContent += `- ... and ${report.summary.total_warnings - 3} more warnings\n`;
                }
                reportContent += '\n';
              }
              
              if (report.coverage_report.missing_docs.length > 0) {
                reportContent += `### 📝 Files Needing Attention\n`;
                report.coverage_report.missing_docs.slice(0, 3).forEach(file => {
                  reportContent += `- ${file}\n`;
                });
                if (report.coverage_report.missing_docs.length > 3) {
                  reportContent += `- ... and ${report.coverage_report.missing_docs.length - 3} more files\n`;
                }
              }
              
            } else {
              reportContent += '⚠️ Validation report not found. Check the workflow logs for details.\n';
            }
            
            reportContent += '\n---\n*This report was automatically generated by the Documentation QA workflow.*';
            
            // Find existing comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const existingComment = comments.find(comment => 
              comment.user.type === 'Bot' && comment.body.includes('Documentation Quality Report')
            );
            
            if (existingComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: reportContent
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: reportContent
              });
            }
            
          } catch (error) {
            console.error('Error posting comment:', error);
          }