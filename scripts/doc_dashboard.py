#!/usr/bin/env python3
"""
Documentation Quality Dashboard

This script generates an HTML dashboard showing documentation quality metrics,
coverage reports, and validation results.
"""

import json
import sys
from pathlib import Path
from datetime import datetime
from typing import Dict, Any, Optional


class DocumentationDashboard:
    """Generates documentation quality dashboard."""
    
    def __init__(self, output_file: str = "docs_dashboard.html"):
        self.output_file = output_file
        self.validation_report = None
        self.coverage_report = None
        
    def load_reports(self):
        """Load validation and coverage reports."""
        # Load validation report
        validation_file = Path("docs_validation_report.json")
        if validation_file.exists():
            with open(validation_file, 'r') as f:
                self.validation_report = json.load(f)
        
        # Load coverage report
        coverage_file = Path("docs_coverage_report.json")
        if coverage_file.exists():
            with open(coverage_file, 'r') as f:
                self.coverage_report = json.load(f)
    
    def generate_dashboard(self):
        """Generate HTML dashboard."""
        self.load_reports()
        
        html_content = self._generate_html()
        
        with open(self.output_file, 'w', encoding='utf-8') as f:
            f.write(html_content)
        
        print(f"ðŸ“Š Dashboard generated: {self.output_file}")
    
    def _generate_html(self) -> str:
        """Generate HTML content for dashboard."""
        return f"""
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Documentation Quality Dashboard</title>
    <style>
        {self._get_css()}
    </style>
</head>
<body>
    <div class="container">
        <header>
            <h1>ðŸ“š Documentation Quality Dashboard</h1>
            <p>Generated on {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</p>
        </header>
        
        {self._generate_summary_section()}
        {self._generate_validation_section()}
        {self._generate_coverage_section()}
        
        <footer>
            <p>Generated by CulicidaeLab Documentation QA System</p>
        </footer>
    </div>
</body>
</html>
"""    
   
 def _get_css(self) -> str:
        """Get CSS styles for dashboard."""
        return """
        body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; margin: 0; padding: 20px; background: #f5f5f5; }
        .container { max-width: 1200px; margin: 0 auto; background: white; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
        header { background: #2196F3; color: white; padding: 20px; border-radius: 8px 8px 0 0; }
        .section { padding: 20px; border-bottom: 1px solid #eee; }
        .metric-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 20px; margin: 20px 0; }
        .metric-card { background: #f8f9fa; padding: 15px; border-radius: 6px; text-align: center; }
        .metric-value { font-size: 2em; font-weight: bold; margin: 10px 0; }
        .metric-label { color: #666; font-size: 0.9em; }
        .success { color: #4CAF50; }
        .warning { color: #FF9800; }
        .error { color: #F44336; }
        .progress-bar { background: #e0e0e0; border-radius: 10px; overflow: hidden; height: 20px; margin: 10px 0; }
        .progress-fill { height: 100%; transition: width 0.3s ease; }
        .issues-list { max-height: 300px; overflow-y: auto; }
        .issue-item { padding: 8px; margin: 4px 0; border-left: 4px solid #ddd; background: #f9f9f9; }
        .issue-error { border-left-color: #F44336; }
        .issue-warning { border-left-color: #FF9800; }
        """
    
    def _generate_summary_section(self) -> str:
        """Generate summary metrics section."""
        if not self.validation_report and not self.coverage_report:
            return '<div class="section"><h2>No reports available</h2></div>'
        
        # Calculate overall health score
        health_score = self._calculate_health_score()
        health_class = "success" if health_score >= 80 else "warning" if health_score >= 60 else "error"
        
        return f"""
        <div class="section">
            <h2>ðŸ“Š Summary</h2>
            <div class="metric-grid">
                <div class="metric-card">
                    <div class="metric-value {health_class}">{health_score}%</div>
                    <div class="metric-label">Overall Health</div>
                </div>
                {self._get_validation_metrics()}
                {self._get_coverage_metrics()}
            </div>
        </div>
        """
    
    def _calculate_health_score(self) -> int:
        """Calculate overall documentation health score."""
        score = 100
        
        if self.validation_report:
            errors = self.validation_report.get('summary', {}).get('total_errors', 0)
            warnings = self.validation_report.get('summary', {}).get('total_warnings', 0)
            score -= errors * 10  # Each error reduces score by 10
            score -= warnings * 2  # Each warning reduces score by 2
        
        if self.coverage_report:
            coverage = self.coverage_report.get('overall_coverage', 100)
            if coverage < 80:
                score -= (80 - coverage) * 2
        
        return max(0, min(100, score))
    
    def _get_validation_metrics(self) -> str:
        """Get validation metrics HTML."""
        if not self.validation_report:
            return ""
        
        summary = self.validation_report.get('summary', {})
        errors = summary.get('total_errors', 0)
        warnings = summary.get('total_warnings', 0)
        
        return f"""
        <div class="metric-card">
            <div class="metric-value {'success' if errors == 0 else 'error'}">{errors}</div>
            <div class="metric-label">Errors</div>
        </div>
        <div class="metric-card">
            <div class="metric-value {'success' if warnings == 0 else 'warning'}">{warnings}</div>
            <div class="metric-label">Warnings</div>
        </div>
        """
    
    def _get_coverage_metrics(self) -> str:
        """Get coverage metrics HTML."""
        if not self.coverage_report:
            return ""
        
        overall = self.coverage_report.get('overall_coverage', 0)
        api_cov = self.coverage_report.get('api_coverage', 0)
        
        return f"""
        <div class="metric-card">
            <div class="metric-value {'success' if overall >= 80 else 'warning' if overall >= 60 else 'error'}">{overall:.1f}%</div>
            <div class="metric-label">Coverage</div>
        </div>
        <div class="metric-card">
            <div class="metric-value {'success' if api_cov >= 80 else 'warning' if api_cov >= 60 else 'error'}">{api_cov:.1f}%</div>
            <div class="metric-label">API Coverage</div>
        </div>
        """


def main():
    """Main entry point."""
    import argparse
    
    parser = argparse.ArgumentParser(description="Generate documentation quality dashboard")
    parser.add_argument("--output", default="docs_dashboard.html", help="Output HTML file")
    
    args = parser.parse_args()
    
    dashboard = DocumentationDashboard(args.output)
    dashboard.generate_dashboard()


if __name__ == "__main__":
    main()